diff --git a/dlls/shell32/assoc.c b/dlls/shell32/assoc.c
index 45e9781d078..bfeca675fc8 100644
--- a/dlls/shell32/assoc.c
+++ b/dlls/shell32/assoc.c
@@ -1133,11 +1133,35 @@ HRESULT WINAPI SHAssocEnumHandlers(const WCHAR *extra, ASSOC_FILTER filter, IEnu
     return S_OK;
 }
 
+
+
+
 /**************************************************************************
  * SHAssocEnumHandlersForProtocolByApplication            [SHELL32.@]
  */
-HRESULT WINAPI SHAssocEnumHandlersForProtocolByApplication(const WCHAR *protocol, REFIID riid, void **handlers)
+HRESULT WINAPI SHAssocEnumHandlersForProtocolByApplication(const WCHAR *protocol, REFIID riid, void **enumhandlers)
 {
-    FIXME("(%s %s %p): stub\n", debugstr_w(protocol), debugstr_guid(riid), handlers);
-    return E_NOTIMPL;
+    struct enumassochandlers *enumassoc;
+
+    FIXME("stub\n");
+    
+    if(!IsEqualIID(riid, &IID_IEnumAssocHandlers))
+    {
+        FIXME("Not implemented objects except IID_IEnumAssocHandlers\n");
+        return E_NOTIMPL;
+    }
+    
+    *enumhandlers = NULL;
+
+    enumassoc = SHAlloc(sizeof(*enumassoc));
+    if (!enumassoc)
+        return E_OUTOFMEMORY;
+
+    enumassoc->IEnumAssocHandlers_iface.lpVtbl = &enumassochandlersvtbl;
+    enumassoc->ref = 1;
+
+    *enumhandlers = &enumassoc->IEnumAssocHandlers_iface;
+    return S_OK;
 }
+
+
diff --git a/dlls/shell32/iconcache.c b/dlls/shell32/iconcache.c
index c122c145609..e3ae2499fe9 100644
--- a/dlls/shell32/iconcache.c
+++ b/dlls/shell32/iconcache.c
@@ -976,6 +976,119 @@ INT WINAPI SHGetIconOverlayIndexW(LPCWSTR pszIconPath, INT iIconIndex)
   return -1;
 }
 
+/****************************************************************************
+ * For SHGetStockIconInfo
+ */
+typedef struct {
+    SHSTOCKICONID id;
+    DWORD iconid;
+} SI_ENTRY;
+
+static const SI_ENTRY si_table[] =
+{
+    [0]   = { SIID_DOCNOASSOC, IDI_SHELL_FILE},
+    [1]   = { SIID_DOCASSOC, IDI_SHELL_DOCUMENT},
+    [2]   = { SIID_APPLICATION, IDI_SHELL_WINDOW},
+    [3]   = { SIID_FOLDER, IDI_SHELL_FOLDER},
+    [4]   = { SIID_FOLDEROPEN, IDI_SHELL_FOLDER_OPEN},
+    [5]   = { SIID_DRIVE525, 0},
+    [6]   = { SIID_DRIVE35, 0},
+    [7]   = { SIID_DRIVERREMOVE, 0},
+    [8]   = { SIID_DRIVERFIXED, IDI_SHELL_DRIVE},
+    [9]   = { SIID_DRIVERNET, IDI_SHELL_NETDRIVE},
+    [10]  = { SIID_DRIVERNETDISABLE, IDI_SHELL_NETDRIVE2},
+    [11]  = { SIID_DRIVERCD, IDI_SHELL_OPTICAL_DRIVE},
+    [12]  = { SIID_DRIVERRAM, IDI_SHELL_RAMDISK},
+    [13]  = { SIID_WORLD, 0},
+    /* Missing: 14 */
+    [15]  = { SIID_SERVER, 0},
+    [16]  = { SIID_PRINTER, IDI_SHELL_PRINT},
+    [17]  = { SIID_MYNETWORK, 0},
+    /* Missing: 18 - 21 */
+    [22]  = { SIID_FIND, 0},
+    [23]  = { SIID_HELP, IDI_SHELL_HELP},
+    /* Missing: 24 - 27 */
+    [28]  = {SIID_SHARE, 0},
+    [29]  = {SIID_LINK, 0},
+    [30]  = {SIID_SLOWFILE, 0},
+    [31]  = {SIID_RECYCLER, IDI_SHELL_TRASH_FOLDER},
+    [32]  = {SIID_RECYCLERFULL, IDI_SHELL_FULL_RECYCLE_BIN},
+    /* Missing: 33 - 39 */
+    [40]  = {SIID_MEDIACDAUDIO, 0},
+    /* Missing: 41 - 46 */
+    [47]  = {SIID_LOCK, IDI_SHELL_PASSWORDS},
+    /* Missing: 48 */
+    [49]  = {SIID_AUTOLIST, 0},
+    [50]  = {SIID_PRINTERNET, 0},
+    [51]  = {SIID_SERVERSHARE, 0},
+    [52]  = {SIID_PRINTERFAX, 0},
+    [53]  = {SIID_PRINTERFAXNET, 0},
+    [54]  = {SIID_PRINTERFILE, 0},
+    [55]  = {SIID_STACK, 0},
+    [56]  = {SIID_MEDIASVCD, 0},
+    [57]  = {SIID_STUFFEDFOLDER, 0},
+    [58]  = {SIID_DRIVEUNKNOWN, 0},
+    [59]  = {SIID_DRIVEDVD, 0},
+    [60]  = {SIID_MEDIADVD, 0},
+    [61]  = {SIID_MEDIADVDRAM, 0},
+    [62]  = {SIID_MEDIADVDRW, 0},
+    [63]  = {SIID_MEDIADVDR, 0},
+    [64]  = {SIID_MEDIADVDROM, 0},
+    [65]  = {SIID_MEDIACDAUDIOPLUS, 0},
+    [66]  = {SIID_MEDIACDRW, 0},
+    [67]  = {SIID_MEDIACDR, 0},
+    [68]  = {SIID_MEDIACDBURN, 0},
+    [69]  = {SIID_MEDIABLANKCD, 0},
+    [70]  = {SIID_MEDIACDROM, 0},
+    [71]  = {SIID_AUDIOFILES, IDI_SHELL_AUDIO_FILE},
+    [72]  = {SIID_IMAGEFILES, IDI_SHELL_IMAGE_FILE},
+    [73]  = {SIID_VIDEOFILES, IDI_SHELL_VIDEO_FILE},
+    [74]  = {SIID_MIXEDFILES, 0},
+    [75]  = {SIID_FOLDERBACK, 0},
+    [76]  = {SIID_FOLDERFRONT, 0},
+    [77]  = {SIID_SHIELD, 0},
+    [78]  = {SIID_WARNING, 0},
+    [79]  = {SIID_INFO, 0},
+    [80]  = {SIID_ERROR, 0},
+    [81]  = {SIID_KEY, 0},
+    [82]  = {SIID_SOFTWARE, 0},
+    [83]  = {SIID_RENAME, IDI_SHELL_RENAME},
+    [84]  = {SIID_DELETE, IDI_SHELL_CONFIRM_DELETE},
+    [85]  = {SIID_MEDIAAUDIODVD, 0},
+    [86]  = {SIID_MEDIAMOVIEDVD, 0},
+    [87]  = {SIID_MEDIAENHANCEDCD, 0},
+    [88]  = {SIID_MEDIAENHANCEDDVD, 0},
+    [89]  = {SIID_MEDIAHDDVD, 0},
+    [90]  = {SIID_MEDIABLUERAY, 0},
+    [91]  = {SIID_MEDIAVCD, 0},
+    [92]  = {SIID_MEDIADVDPLUSR, 0},
+    [93]  = {SIID_MEDIADVDPLUSRW, 0},
+    [94]  = {SIID_DESKTOPPC, IDI_SHELL_MY_COMPUTER},
+    [95]  = {SIID_MOBILEPC, 0},
+    [96]  = {SIID_USERS, IDI_SHELL_USERS},
+    [97]  = {SIID_MEDIASMARTMEDIA, 0},
+    [98]  = {SIID_MEDIACOMPACTFLASH, 0},
+    [99]  = {SIID_DEVICECELLPHONE, 0},
+    [100] = {SIID_DEVICECAMERA, 0},
+    [101] = {SIID_DEVICEVIDEOCAMERA, 0},
+    [102] = {SIID_DEVICEAUDIOPLAYER, 0},
+    [103] = {SIID_NETWORKCONNECT, 0},
+    [104] = {SIID_INTERNET, IDI_SHELL_WEB_BROWSER},
+    [105] = {SIID_ZIPFILE, 0},
+    [106] = {SIID_SETTINGS, IDI_SHELL_SETTINGS},
+    /* Missing: 107 - 131 */
+    [132] = {SIID_DRIVEHDDVD, 0},
+    [133] = {SIID_DRIVEBD, 0},
+    [134] = {SIID_MEDIAHDDVDROM, 0},
+    [135] = {SIID_MEDIAHDDVDR, 0},
+    [136] = {SIID_MEDIAHDDVDRAM, 0},
+    [137] = {SIID_MEDIABDROM, 0},
+    [138] = {SIID_MEDIABDR, 0},
+    [139] = {SIID_MEDIABDRE, 0},
+    [140] = {SIID_CLUSTEREDDRIVE, 0}
+    /* Missing: 141 - 180  and  SIID_MAX_ICONS = 181*/
+ };
+
 /****************************************************************************
  * SHGetStockIconInfo [SHELL32.@]
  *
@@ -993,23 +1106,52 @@ INT WINAPI SHGetIconOverlayIndexW(LPCWSTR pszIconPath, INT iIconIndex)
  */
 HRESULT WINAPI SHGetStockIconInfo(SHSTOCKICONID id, UINT flags, SHSTOCKICONINFO *sii)
 {
-    FIXME("(%d, 0x%x, %p) semi-stub\n", id, flags, sii);
+    HMODULE hmod;
+
+    TRACE("(%d, 0x%x, %p)\n", id, flags, sii);
+
     if ((id < 0) || (id >= SIID_MAX_ICONS) || !sii || (sii->cbSize != sizeof(SHSTOCKICONINFO))) {
         return E_INVALIDARG;
     }
 
     GetSystemDirectoryW(sii->szPath, MAX_PATH);
-
-    /* no icons defined: use default */
-    sii->iIcon = -IDI_SHELL_FILE;
     lstrcatW(sii->szPath, L"\\shell32.dll");
 
-    if (flags)
-        FIXME("flags 0x%x not implemented\n", flags);
-
     sii->hIcon = NULL;
     sii->iSysImageIndex = -1;
 
+    /* this is not how windows does it, on windows picked mostly from imageres.dll !*/
+    if (si_table[id].iconid)
+        sii->iIcon = sii->iSysImageIndex - si_table[id].id;
+    else
+    {
+        FIXME("Couldn`t find SIID %d, returning default values (IDI_SHELL_FILE)\n", id);
+        sii->iIcon = sii->iSysImageIndex - IDI_SHELL_FILE;
+    }
+
+    if (flags & SHGSI_ICON)
+    {
+        flags &= ~SHGSI_ICON;
+
+        hmod = GetModuleHandleW(L"shell32.dll");
+        if (hmod)
+        {
+            if (si_table[id].iconid)
+                sii->hIcon = LoadIconW(hmod, MAKEINTRESOURCEW(si_table[id].iconid));
+            else
+                sii->hIcon = LoadIconW(hmod, MAKEINTRESOURCEW(IDI_SHELL_FILE));
+        }
+
+        if (!sii->hIcon)
+        {
+            ERR("failed to get an icon handle\n");
+            return E_INVALIDARG;
+        }
+    }
+
+    if (flags)
+        FIXME("flags 0x%x not implemented\n", flags);
+
     TRACE("%3d: returning %s (%d)\n", id, debugstr_w(sii->szPath), sii->iIcon);
 
     return S_OK;
diff --git a/dlls/shell32/shlexec.c b/dlls/shell32/shlexec.c
index 828c7168a34..4d90ed2de7d 100644
--- a/dlls/shell32/shlexec.c
+++ b/dlls/shell32/shlexec.c
@@ -1655,6 +1655,12 @@ static BOOL SHELL_execute( LPSHELLEXECUTEINFOW sei, SHELL_ExecuteW32 execfunc )
 
     sei->hProcess = NULL;
 
+    /* remove trailing spaces */
+    WCHAR *end = 0;
+    end = sei_tmp.lpFile + wcslen( sei_tmp.lpFile ) - 1;
+    while (end >= sei_tmp.lpFile && *end == ' ') *end-- = 0;
+
+
     /* make copies of all path/command strings */
     if (!sei_tmp.lpFile)
     {
diff --git a/dlls/shell32/shlfileop.c b/dlls/shell32/shlfileop.c
index a7e88c813d2..efb9d89b4ea 100644
--- a/dlls/shell32/shlfileop.c
+++ b/dlls/shell32/shlfileop.c
@@ -55,6 +55,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(shell);
 #define DE_SAMEFILE      0x71
 #define DE_DESTSAMETREE  0x7D
 
+#define FO_NEW         0x5
+
 static DWORD SHNotifyCreateDirectoryA(LPCSTR path, LPSECURITY_ATTRIBUTES sec);
 static DWORD SHNotifyCreateDirectoryW(LPCWSTR path, LPSECURITY_ATTRIBUTES sec);
 static DWORD SHNotifyRemoveDirectoryA(LPCSTR path);
@@ -1802,18 +1804,148 @@ HRESULT WINAPI SHMultiFileProperties(IDataObject *pdtobj, DWORD flags)
 
 struct file_operation
 {
-    IFileOperation IFileOperation_iface;
-    LONG ref;
+    struct list entry;
+    UINT        wFunc;
+    LPCWSTR     pFrom;
+    LPCWSTR     pTo;
+    LPCWSTR     pNewName;
+    LPCWSTR     pTemplateName;
+    DWORD       attributes;
 };
 
-static inline struct file_operation *impl_from_IFileOperation(IFileOperation *iface)
+struct file_operations
 {
-    return CONTAINING_RECORD(iface, struct file_operation, IFileOperation_iface);
+    IFileOperation  IFileOperation_iface;
+    LONG            ref;
+    HWND            hwnd;
+    DWORD           flags;
+    BOOL            fAnyOperationsAborted;
+    LPVOID          hNameMappings;
+    LPCWSTR         lpszProgressTitle;
+    struct list     ops;
+};
+
+static HRESULT add_operation( IShellItem *item, IShellItem *folder,
+        LPCWSTR name, UINT func, struct file_operation **out)
+{
+    LPWSTR tmp, from, to = NULL;
+    HRESULT ret;
+
+    if (!out) return ERROR_INVALID_PARAMETER;
+
+    ret = IShellItem_GetDisplayName(item, SIGDN_FILESYSPATH, &tmp);
+    if (S_OK != ret)
+    {
+        return ERROR_INVALID_PARAMETER;
+    }
+
+    from = calloc(lstrlenW(tmp) + 2, sizeof(WCHAR));
+    if (!from)
+    {
+        ret = E_OUTOFMEMORY;
+        CoTaskMemFree(tmp);
+        goto end;
+    }
+
+    lstrcpyW(from, tmp);
+    CoTaskMemFree(tmp);
+
+    if (func != FO_DELETE)
+    {
+
+        ret = IShellItem_GetDisplayName(folder, SIGDN_FILESYSPATH, &tmp);
+        if (S_OK != ret)
+        {
+            ret = ERROR_INVALID_PARAMETER;
+            goto end;
+        }
+
+        if (name)
+        {
+            to = calloc(lstrlenW(tmp) + MAX_PATH +  2, sizeof(WCHAR));
+            PathCombineW(to, tmp, name);
+        }
+        else
+        {
+            to = calloc(lstrlenW(tmp) + 2, sizeof(WCHAR));
+            if (!to)
+            {
+                ret = E_OUTOFMEMORY;
+                CoTaskMemFree(tmp);
+                goto end;
+            }
+
+            lstrcpyW(to, tmp);
+        }
+        CoTaskMemFree(tmp);
+	}
+
+    *out = calloc(1, sizeof(struct file_operation));
+    if (!*out)
+    {
+        ret = E_OUTOFMEMORY;
+        goto end;
+    }
+
+    (*out)->wFunc = func;
+    (*out)->pFrom = from;
+    (*out)->pTo = to;
+    return ret;
+
+end:
+    if (from) free(from);
+    if (to) free(to);
+
+    return ret;
+}
+
+static HRESULT new_item(const WCHAR *folder, const WCHAR *name, DWORD attributes, struct file_operations *ops)
+{
+    HRESULT ret;
+    WCHAR path[MAX_PATH];
+    HANDLE file;
+
+    if (!(ops->flags & FOF_NOCONFIRMATION) && !PathFileExistsW(folder))
+    {
+        if (!SHELL_ConfirmDialogW(ops->hwnd, ASK_CREATE_FOLDER, PathFindFileNameW(folder), NULL))
+        {
+            ops->fAnyOperationsAborted = TRUE;
+            return ERROR_CANCELLED;
+        }
+        ret = SHNotifyCreateDirectoryW(folder, NULL);
+        if (S_OK != ret) return ret;
+    }
+
+    PathCombineW(path, folder, name);
+
+    if (attributes & FILE_ATTRIBUTE_DIRECTORY)
+    {
+        ret = SHNotifyCreateDirectoryW(path, NULL);
+        if (S_OK == ret)
+        {
+            if (!SetFileAttributesW(path, attributes)) ret = GetLastError();
+        };
+    }
+    else
+    {
+        file = CreateFileW(path, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, attributes, NULL);
+
+        if (file != INVALID_HANDLE_VALUE)
+            CloseHandle(file);
+        else
+            ret = GetLastError();
+    }
+
+    return ret;
+}
+static inline struct file_operations *impl_from_IFileOperation(IFileOperation *iface)
+{
+    return CONTAINING_RECORD(iface, struct file_operations, IFileOperation_iface);
 }
 
 static HRESULT WINAPI file_operation_QueryInterface(IFileOperation *iface, REFIID riid, void **out)
 {
-    struct file_operation *operation = impl_from_IFileOperation(iface);
+    struct file_operations *operation = impl_from_IFileOperation(iface);
 
     TRACE("(%p, %s, %p).\n", iface, debugstr_guid(riid), out);
 
@@ -1833,7 +1965,7 @@ static HRESULT WINAPI file_operation_QueryInterface(IFileOperation *iface, REFII
 
 static ULONG WINAPI file_operation_AddRef(IFileOperation *iface)
 {
-    struct file_operation *operation = impl_from_IFileOperation(iface);
+    struct file_operations *operation = impl_from_IFileOperation(iface);
     ULONG ref = InterlockedIncrement(&operation->ref);
 
     TRACE("(%p): ref=%lu.\n", iface, ref);
@@ -1843,14 +1975,23 @@ static ULONG WINAPI file_operation_AddRef(IFileOperation *iface)
 
 static ULONG WINAPI file_operation_Release(IFileOperation *iface)
 {
-    struct file_operation *operation = impl_from_IFileOperation(iface);
-    ULONG ref = InterlockedDecrement(&operation->ref);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
+    struct file_operation *ptr, *next;
+    ULONG ref = InterlockedDecrement(&operations->ref);
 
     TRACE("(%p): ref=%lu.\n", iface, ref);
 
     if (!ref)
     {
-        free(operation);
+        LIST_FOR_EACH_ENTRY_SAFE( ptr, next, &operations->ops, struct file_operation, entry )
+        {
+            if (ptr->pFrom) free((void*)ptr->pFrom);
+            if (ptr->pTo) free((void*)ptr->pTo);
+            if (ptr->pNewName) free((void*)ptr->pNewName);
+            if (ptr->pTemplateName) free((void*)ptr->pTemplateName);
+            free(ptr);
+        }
+        free(operations);
     }
 
     return ref;
@@ -1872,9 +2013,13 @@ static HRESULT WINAPI file_operation_Unadvise(IFileOperation *iface, DWORD cooki
 
 static HRESULT WINAPI file_operation_SetOperationFlags(IFileOperation *iface, DWORD flags)
 {
-    FIXME("(%p, %lx): stub.\n", iface, flags);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
 
-    return E_NOTIMPL;
+    TRACE("(%p): flags: %lx.\n", iface, flags);
+
+    operations->flags = flags;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI file_operation_SetProgressMessage(IFileOperation *iface, LPCWSTR message)
@@ -1900,9 +2045,13 @@ static HRESULT WINAPI file_operation_SetProperties(IFileOperation *iface, IPrope
 
 static HRESULT WINAPI file_operation_SetOwnerWindow(IFileOperation *iface, HWND owner)
 {
-    FIXME("(%p, %p): stub.\n", iface, owner);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
 
-    return E_NOTIMPL;
+    TRACE("(%p): owner: %p.\n", iface, owner);
+
+    operations->hwnd = owner;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI file_operation_ApplyPropertiesToItem(IFileOperation *iface, IShellItem *item)
@@ -1922,9 +2071,16 @@ static HRESULT WINAPI file_operation_ApplyPropertiesToItems(IFileOperation *ifac
 static HRESULT WINAPI file_operation_RenameItem(IFileOperation *iface, IShellItem *item, LPCWSTR name,
         IFileOperationProgressSink *sink)
 {
-    FIXME("(%p, %p, %s, %p): stub.\n", iface, item, debugstr_w(name), sink);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
+    struct file_operation *op;
+    HRESULT ret;
 
-    return E_NOTIMPL;
+    TRACE("(%p, %p, %s, %p).\n", iface, item, debugstr_w(name), sink);
+
+    ret = add_operation(item, item, name, FO_RENAME, &op);
+
+    if (ret == S_OK) list_add_tail( &operations->ops, &op->entry );
+    return ret;
 }
 
 static HRESULT WINAPI file_operation_RenameItems(IFileOperation *iface, IUnknown *items, LPCWSTR name)
@@ -1937,9 +2093,15 @@ static HRESULT WINAPI file_operation_RenameItems(IFileOperation *iface, IUnknown
 static HRESULT WINAPI file_operation_MoveItem(IFileOperation *iface, IShellItem *item, IShellItem *folder,
         LPCWSTR name, IFileOperationProgressSink *sink)
 {
-    FIXME("(%p, %p, %p, %s, %p): stub.\n", iface, item, folder, debugstr_w(name), sink);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
+    struct file_operation *op;
+    HRESULT ret;
 
-    return E_NOTIMPL;
+    TRACE("(%p, %p, %p, %s, %p).\n", iface, item, folder, debugstr_w(name), sink);
+    ret = add_operation(item, folder, name, FO_MOVE, &op);
+
+    if (ret == S_OK) list_add_tail( &operations->ops, &op->entry );
+    return ret;
 }
 
 static HRESULT WINAPI file_operation_MoveItems(IFileOperation *iface, IUnknown *items, IShellItem *folder)
@@ -1952,9 +2114,16 @@ static HRESULT WINAPI file_operation_MoveItems(IFileOperation *iface, IUnknown *
 static HRESULT WINAPI file_operation_CopyItem(IFileOperation *iface, IShellItem *item, IShellItem *folder,
         LPCWSTR name, IFileOperationProgressSink *sink)
 {
-    FIXME("(%p, %p, %p, %s, %p): stub.\n", iface, item, folder, debugstr_w(name), sink);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
+    struct file_operation *op;
+    HRESULT ret;
 
-    return E_NOTIMPL;
+    TRACE("(%p, %p, %p, %s, %p).\n", iface, item, folder, debugstr_w(name), sink);
+
+    ret = add_operation(item, folder, name, FO_COPY, &op);
+
+    if (ret == S_OK) list_add_tail( &operations->ops, &op->entry );
+    return ret;
 }
 
 static HRESULT WINAPI file_operation_CopyItems(IFileOperation *iface, IUnknown *items, IShellItem *folder)
@@ -1967,9 +2136,16 @@ static HRESULT WINAPI file_operation_CopyItems(IFileOperation *iface, IUnknown *
 static HRESULT WINAPI file_operation_DeleteItem(IFileOperation *iface, IShellItem *item,
         IFileOperationProgressSink *sink)
 {
-    FIXME("(%p, %p, %p): stub.\n", iface, item, sink);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
+    struct file_operation *op;
+    HRESULT ret;
 
-    return E_NOTIMPL;
+    TRACE("(%p, %p, %p).\n", iface, item, sink);
+
+    ret = add_operation(item, NULL, NULL , FO_DELETE, &op);
+
+    if (ret == S_OK) list_add_tail( &operations->ops, &op->entry );
+    return ret;
 }
 
 static HRESULT WINAPI file_operation_DeleteItems(IFileOperation *iface, IUnknown *items)
@@ -1982,24 +2158,131 @@ static HRESULT WINAPI file_operation_DeleteItems(IFileOperation *iface, IUnknown
 static HRESULT WINAPI file_operation_NewItem(IFileOperation *iface, IShellItem *folder, DWORD attributes,
         LPCWSTR name, LPCWSTR template, IFileOperationProgressSink *sink)
 {
-    FIXME("(%p, %p, %lx, %s, %s, %p): stub.\n", iface, folder, attributes,
+
+    struct file_operations *operations = impl_from_IFileOperation(iface);
+    struct file_operation *op;
+    HRESULT ret;
+    LPWSTR tmp, new = NULL, to, temp = NULL;
+
+    TRACE("(%p, %p, %lx, %s, %s, %p).\n", iface, folder, attributes,
           debugstr_w(name), debugstr_w(template), sink);
 
-    return E_NOTIMPL;
+    ret = IShellItem_GetDisplayName(folder, SIGDN_FILESYSPATH, &tmp);
+    if (S_OK != ret)
+    {
+        return ERROR_INVALID_PARAMETER;
+    }
+
+    to = calloc(lstrlenW(tmp) + 1, sizeof(WCHAR));
+    if (!to)
+    {
+        CoTaskMemFree(tmp);
+        ret = E_OUTOFMEMORY;
+        goto end;
+    }
+
+    lstrcpyW(to, tmp);
+    CoTaskMemFree(tmp);
+
+    if (name)
+    {
+        new = calloc(lstrlenW(name) + 1, sizeof(WCHAR));
+        if (!new)
+        {
+            ret = E_OUTOFMEMORY;
+            goto end;
+        }
+        lstrcpyW(new, name);
+    }
+
+    if (template)
+    {
+        temp = calloc(lstrlenW(template) + 1, sizeof(WCHAR));
+        if (!temp)
+        {
+            ret = E_OUTOFMEMORY;
+            goto end;
+        }
+        lstrcpyW(temp, template);
+    }
+
+    op = calloc(1, sizeof(struct file_operation));
+    if (!op)
+    {
+        ret = E_OUTOFMEMORY;
+        goto end;
+    }
+    op->wFunc = FO_NEW;
+    op->pTo = to;
+    op->pNewName = new;
+    op->pTemplateName = temp;
+    op->attributes = attributes;
+    list_add_tail( &operations->ops, &op->entry );
+    return ret;
+
+end:
+    if (new) free(new);
+    if (temp) free(temp);
+    if (to) free(to);
+
+    return ret;
 }
 
 static HRESULT WINAPI file_operation_PerformOperations(IFileOperation *iface)
 {
-    FIXME("(%p): stub.\n", iface);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
+    struct file_operation *ptr, *next;
+    SHFILEOPSTRUCTW shfoW;
+    HRESULT ret = E_UNEXPECTED;
 
-    return E_NOTIMPL;
+    TRACE("\n");
+
+    shfoW.hwnd = operations->hwnd;
+    shfoW.fFlags = operations->flags;
+    shfoW.hNameMappings = operations->hNameMappings;
+    shfoW.lpszProgressTitle = operations->lpszProgressTitle;
+
+    LIST_FOR_EACH_ENTRY_SAFE( ptr, next, &operations->ops, struct file_operation, entry )
+    {
+        TRACE("func: %d\n", ptr->wFunc);
+        if (ptr->wFunc == FO_NEW)
+        {
+            if (ptr->pTemplateName)
+                FIXME("stub template\n");
+
+            ret = new_item(ptr->pTo, ptr->pNewName, ptr->attributes, operations);
+
+            if (ptr->pNewName) free((void*)ptr->pNewName);
+            if (ptr->pTo) free((void*)ptr->pTo);
+            if (ptr->pTemplateName) free((void*)ptr->pTemplateName);
+            list_remove(&ptr->entry);
+            continue;
+        }
+
+        shfoW.wFunc = ptr->wFunc;
+        shfoW.pFrom = ptr->pFrom;
+        shfoW.pTo = ptr->pTo;
+
+        ret = SHFileOperationW(&shfoW);
+        operations->fAnyOperationsAborted = shfoW.fAnyOperationsAborted;
+
+        list_remove(&ptr->entry);
+        if (ptr->pFrom) free((void*)ptr->pFrom);
+        if (ptr->pTo) free((void*)ptr->pTo);
+        free(ptr);
+    }
+
+    return ret;
 }
 
 static HRESULT WINAPI file_operation_GetAnyOperationsAborted(IFileOperation *iface, BOOL *aborted)
 {
-    FIXME("(%p, %p): stub.\n", iface, aborted);
+    struct file_operations *operations = impl_from_IFileOperation(iface);
+    TRACE("(%p, %p) aborted:%d.\n", iface, aborted, operations->fAnyOperationsAborted);
 
-    return E_NOTIMPL;
+    if (aborted) *aborted = operations->fAnyOperationsAborted;
+
+    return S_OK;
 }
 
 static const IFileOperationVtbl file_operation_vtbl =
@@ -2031,7 +2314,7 @@ static const IFileOperationVtbl file_operation_vtbl =
 
 HRESULT WINAPI IFileOperation_Constructor(IUnknown *outer, REFIID riid, void **out)
 {
-    struct file_operation *object;
+    struct file_operations *object;
     HRESULT hr;
 
     object = calloc(1, sizeof(*object));
@@ -2040,6 +2323,7 @@ HRESULT WINAPI IFileOperation_Constructor(IUnknown *outer, REFIID riid, void **o
 
     object->IFileOperation_iface.lpVtbl = &file_operation_vtbl;
     object->ref = 1;
+    list_init( &object->ops);
 
     hr = IFileOperation_QueryInterface(&object->IFileOperation_iface, riid, out);
     IFileOperation_Release(&object->IFileOperation_iface);
