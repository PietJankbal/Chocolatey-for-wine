https://bugs.winehq.org/show_bug.cgi?id=45432

Compiled against wine-7.10

Wine refuses to load compiled wine binaries as native, so I had to apply dirty hack: replace the string 'Wine builtin dll'
in the binary with some random other string: "sed -i 's/Wine builtin DLL/modified winedll/' user32.dll"


diff --git a/dlls/hnetcfg/Makefile.in b/dlls/hnetcfg/Makefile.in
index 0ff7c511eb4..a5027154c01 100644
--- a/dlls/hnetcfg/Makefile.in
+++ b/dlls/hnetcfg/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = hnetcfg.dll
-IMPORTS   = oleaut32 ole32 advapi32 mpr uuid
+IMPORTS   = oleaut32 ole32 advapi32 mpr uuid iphlpapi user32
 DELAYIMPORTS = ws2_32 winhttp shcore xmllite
 EXTRADLLFLAGS = -Wb,--prefer-native
 
diff --git a/dlls/hnetcfg/apps.c b/dlls/hnetcfg/apps.c
index 842ead499fb..5716509316a 100644
--- a/dlls/hnetcfg/apps.c
+++ b/dlls/hnetcfg/apps.c
@@ -117,6 +117,7 @@ static REFIID tid_id[] =
     &IID_IUPnPNAT,
     &IID_IStaticPortMappingCollection,
     &IID_IStaticPortMapping,
+    &IID_INetFwRule,
 };
 
 HRESULT get_typeinfo( enum type_id tid, ITypeInfo **ret )
diff --git a/dlls/hnetcfg/hnetcfg.c b/dlls/hnetcfg/hnetcfg.c
index 70c49d6806a..85a6cd334d3 100644
--- a/dlls/hnetcfg/hnetcfg.c
+++ b/dlls/hnetcfg/hnetcfg.c
@@ -114,6 +114,7 @@ static hnetcfg_cf fw_app_cf = { { &hnetcfg_cf_vtbl }, NetFwAuthorizedApplication
 static hnetcfg_cf fw_openport_cf = { { &hnetcfg_cf_vtbl }, NetFwOpenPort_create };
 static hnetcfg_cf fw_policy2_cf = { { &hnetcfg_cf_vtbl }, NetFwPolicy2_create };
 static hnetcfg_cf upnpnat_cf = { { &hnetcfg_cf_vtbl }, IUPnPNAT_create };
+static hnetcfg_cf fw_rule_cf = { { &hnetcfg_cf_vtbl }, NetFwRule_create };
 
 
 BOOL WINAPI DllMain(HINSTANCE hInstDLL, DWORD fdwReason, LPVOID reserved)
@@ -158,6 +159,11 @@ HRESULT WINAPI DllGetClassObject( REFCLSID rclsid, REFIID iid, LPVOID *ppv )
     {
         cf = &upnpnat_cf.IClassFactory_iface;
     }
+    else if (IsEqualGUID( rclsid, &CLSID_NetFwRule ))
+    {
+        cf = &fw_rule_cf.IClassFactory_iface;
+    }
+
 
     if (!cf) return CLASS_E_CLASSNOTAVAILABLE;
     return IClassFactory_QueryInterface( cf, iid, ppv );
diff --git a/dlls/hnetcfg/hnetcfg_private.h b/dlls/hnetcfg/hnetcfg_private.h
index 9e6c4ec9618..490d05d922b 100644
--- a/dlls/hnetcfg/hnetcfg_private.h
+++ b/dlls/hnetcfg/hnetcfg_private.h
@@ -30,7 +30,8 @@ enum type_id
     IUPnPNAT_tid,
     IStaticPortMappingCollection_tid,
     IStaticPortMapping_tid,
-    last_tid
+    last_tid,
+    INetFwRule_tid
 };
 
 HRESULT get_typeinfo(enum type_id, ITypeInfo **) DECLSPEC_HIDDEN;
@@ -46,3 +47,4 @@ HRESULT NetFwOpenPorts_create(IUnknown *, LPVOID *) DECLSPEC_HIDDEN;
 HRESULT NetFwOpenPort_create(IUnknown *, LPVOID *) DECLSPEC_HIDDEN;
 HRESULT NetFwServices_create(IUnknown *, LPVOID *) DECLSPEC_HIDDEN;
 HRESULT IUPnPNAT_create(IUnknown *, void **) DECLSPEC_HIDDEN;
+HRESULT NetFwRule_create(IUnknown *outer, void **obj) DECLSPEC_HIDDEN;
diff --git a/dlls/hnetcfg/policy.c b/dlls/hnetcfg/policy.c
index 3426fc82304..ccf81940492 100644
--- a/dlls/hnetcfg/policy.c
+++ b/dlls/hnetcfg/policy.c
@@ -26,7 +26,10 @@
 #include "winuser.h"
 #include "ole2.h"
 #include "netfw.h"
+#include "winsock2.h"
+#include "iphlpapi.h"
 
+#include "wine/heap.h"
 #include "wine/debug.h"
 #include "hnetcfg_private.h"
 
@@ -66,6 +69,251 @@ static inline fw_rules *impl_from_INetFwRules( INetFwRules *iface )
     return CONTAINING_RECORD(iface, fw_rules, INetFwRules_iface);
 }
 
+typedef struct
+{
+    BSTR application_name;
+    BSTR description;
+    BSTR grouping;
+    BSTR interface_types;
+    BSTR local_addresses;
+    BSTR local_ports;
+    BSTR name;
+    BSTR remote_addresses;
+    BSTR remote_ports;
+    BSTR service_name;
+    BSTR interface_name;
+    NET_FW_ACTION action;
+    LONG protocol;
+    VARIANT_BOOL enabled;
+    VARIANT_BOOL edge_traversal;
+    LONG profiles;
+    NET_FW_RULE_DIRECTION direction;
+} rule_data;
+
+typedef struct fw_rule
+{
+    INetFwRule INetFwRule_iface;
+    LONG refs;
+    rule_data data;
+} fw_rule;
+
+static inline fw_rule *impl_from_INetFwRule(INetFwRule *iface)
+{
+    return CONTAINING_RECORD(iface, fw_rule, INetFwRule_iface);
+}
+
+
+
+
+
+
+
+
+
+static void parse_rule_entry_from_registry(rule_data *rule, WCHAR *left, WCHAR *right)
+{
+    if (!lstrcmpW(left, L"Name"))
+        rule->name = right;
+    else if (!lstrcmpW(left, L"App"))
+        rule->application_name = right;
+    else if (!lstrcmpW(left, L"EmbedCtxt"))
+        rule->grouping = right;
+    else if (!lstrcmpW(left, L"Active"))
+    {
+        if (!lstrcmpW(right, L"TRUE"))
+            rule->enabled = VARIANT_TRUE;
+        else if (!lstrcmpW(right, L"FALSE"))
+            rule->enabled = VARIANT_FALSE;
+        else
+            ERR("Invalid Action value: %s\n", wine_dbgstr_w(right));
+    }
+    else if (!lstrcmpW(left, L"LPort"))
+        rule->local_ports = right;
+    else if (!lstrcmpW(left, L"RPort"))
+        rule->remote_ports = right;
+    else if (!lstrcmpW(left, L"Svc"))
+        rule->service_name = right;
+    else if (!lstrcmpW(left, L"Protocol"))
+        rule->protocol = wcstol(right, 0, 10);
+    else if (!lstrcmpW(left, L"Edge"))
+    {
+        if (!lstrcmpW(right, L"TRUE"))
+            rule->edge_traversal = VARIANT_TRUE;
+        else if (!lstrcmpW(right, L"FALSE"))
+            rule->edge_traversal = VARIANT_FALSE;
+        else
+            ERR("Invalid Edge value: %s\n", wine_dbgstr_w(right));
+    }
+    else if (!lstrcmpW(left, L"Action"))
+    {
+        if (!lstrcmpW(right, L"Allow"))
+            rule->action = NET_FW_ACTION_ALLOW;
+        else if (!lstrcmpW(right, L"Block"))
+            rule->action = NET_FW_ACTION_BLOCK;
+        else
+            ERR("Invalid Action value: %s\n", wine_dbgstr_w(right));
+    }
+    else if (!lstrcmpW(left, L"Dir"))
+    {
+        if (!lstrcmpW(right, L"In"))
+           rule->direction = NET_FW_RULE_DIR_IN;
+        else if (!lstrcmpW(right, L"Out"))
+            rule->direction = NET_FW_RULE_DIR_OUT;
+        else
+           ERR("Invalid Direction value: %s\n", wine_dbgstr_w(right));
+    }
+    else if (!lstrcmpW(left, L"Profile"))
+    {
+        if (!lstrcmpW(right, L"Private"))
+            rule->profiles = NET_FW_PROFILE2_PRIVATE;
+        else if (!lstrcmpW(right, L"Public"))
+            rule->profiles = NET_FW_PROFILE2_PUBLIC;
+        else if (!lstrcmpW(right, L"Domain"))
+            rule->profiles = NET_FW_PROFILE2_DOMAIN;
+        else
+            ERR("Invalid Profile value: %s\n", wine_dbgstr_w(right));
+    }
+    else if (!lstrcmpW(left, L"Desc"))
+        rule->description = right;
+    else if (!lstrcmpW(left, L"RA4"))
+        rule->remote_addresses = right; /* Two remote addresses? */
+    else if (!lstrcmpW(left, L"RA6"))
+        rule->remote_addresses = right;
+    else if (!lstrcmpW(left, L"LA4"))
+        rule->local_addresses = right;
+    else if (!lstrcmpW(left, L"LA6"))
+        rule->local_addresses = right; /* Two local addresses? */
+    else if (!lstrcmpW(left, L"ICMP4"))
+    {
+        /* Unknown */
+    }
+    else if (!lstrcmpW(left, L"ICMP6"))
+    {
+        /* Unknown */
+    }
+    else if (!lstrcmpW(left, L"Defer"))
+    {
+        /* Unknown */
+    }
+    else if (!lstrcmpW(left, L"IF"))
+    {
+        IP_ADAPTER_ADDRESSES *adapters = NULL;
+        ULONG len = 0;
+        BOOL found = FALSE;
+        HRESULT hr;
+        char buffer[100];
+
+        hr = GetAdaptersAddresses(AF_UNSPEC, 0, NULL, NULL, &len);
+        if(hr == ERROR_NO_DATA)
+        {
+            ERR("GetAdaptersAddresses returned %d\n", hr);
+            return;
+        }
+
+        adapters = heap_alloc(len);
+        hr = GetAdaptersAddresses(AF_UNSPEC, 0, NULL, adapters, &len);
+        if (hr != ERROR_SUCCESS)
+           ERR( "GetAdaptersAddresses returned %d\n", hr);
+
+        WideCharToMultiByte(CP_ACP, 0, right, -1, buffer, sizeof(buffer), NULL, NULL);
+
+        while (adapters)
+        {
+            if (!lstrcmpA(adapters->AdapterName, buffer))
+            {
+                rule->interface_name = adapters->FriendlyName;
+                found = TRUE;
+            }
+            adapters = adapters->Next;
+        }
+
+        if (!found)
+            ERR("Can't find interface: %s\n", wine_dbgstr_w(right));
+    }
+    else if (!lstrcmpW(left, L"LPort2_10")) /* Two local ports? */
+        rule->local_ports = right;
+    else if (!lstrcmpW(left, L"RPort2_10")) /* Two remote ports ? */
+        rule->remote_ports = right;
+    else if (!lstrcmpW(left, L"IFType"))
+        rule->interface_types = right;
+    else
+        ERR("Unhandled entry %s = %s\n", wine_dbgstr_w(left), wine_dbgstr_w(right));
+}
+
+static void parse_rule_from_registry(rule_data *rule, WCHAR *rule_text)
+{
+    /* Skip version */
+    rule_text = wcschr(rule_text, '|') + 1;
+    do
+    {
+        int len_entry = wcschr(rule_text, '|') - rule_text;
+
+        /* Parse left/right */
+        int len_left = wcschr(rule_text, '=') - rule_text;
+        rule_text[len_left] = 0;
+        rule_text[len_entry] = 0;
+        parse_rule_entry_from_registry(rule, rule_text, rule_text + len_left + 1);
+
+        rule_text += len_entry + 1;
+    } while (*rule_text);
+}
+
+static BOOL read_rule_from_registry(rule_data *rule, const WCHAR *target_name, WCHAR *rule_buffer, DWORD rule_buffer_len)
+{
+    HKEY key;
+    int i = 0;
+    WCHAR name[200];
+    DWORD type = REG_SZ;
+    DWORD data_len = rule_buffer_len;
+    DWORD name_len = sizeof(name);
+    static const char *path = "SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\FirewallRules";
+    LSTATUS status = RegCreateKeyExA(HKEY_LOCAL_MACHINE, path, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, NULL);
+    if (status != 0)
+        return FALSE;
+
+    memset(rule, 0, sizeof(rule_data));
+
+    if (status)
+        return FALSE;
+
+    while (RegEnumValueW(key, i, name, &name_len, NULL, &type, (BYTE*)rule_buffer, &data_len) == ERROR_SUCCESS)
+    {
+        rule_buffer[data_len] = 0;
+
+        memset(rule, 0, sizeof(rule_data));
+        parse_rule_from_registry(rule, rule_buffer);
+        if (!lstrcmpW(rule->name, target_name))
+        {
+            /* Make rule permanent */
+            rule->application_name = SysAllocString(rule->application_name);
+            rule->description = SysAllocString(rule->description);
+            rule->grouping = SysAllocString(rule->grouping);
+            rule->interface_types = SysAllocString(rule->interface_types);
+            rule->local_addresses = SysAllocString(rule->local_addresses);
+            rule->local_ports = SysAllocString(rule->local_ports);
+            rule->name = SysAllocString(rule->name);
+            rule->remote_addresses = SysAllocString(rule->remote_addresses);
+            rule->remote_ports = SysAllocString(rule->remote_ports);
+            rule->service_name = SysAllocString(rule->service_name);
+            rule->interface_name = SysAllocString(rule->interface_name);
+
+            RegCloseKey(key);
+            return TRUE;
+        }
+        name_len = sizeof(name);
+        data_len = rule_buffer_len;
+        i++;
+    }
+    RegCloseKey(key);
+    return FALSE;
+}
+
+
+
+
+
+
+
 static HRESULT WINAPI netfw_rules_QueryInterface(
     INetFwRules *iface,
     REFIID riid,
@@ -205,7 +453,7 @@ static HRESULT WINAPI netfw_rules_Add(
     fw_rules *This = impl_from_INetFwRules( iface );
 
     FIXME("%p, %p\n", This, rule);
-    return E_NOTIMPL;
+    return S_OK;
 }
 
 static HRESULT WINAPI netfw_rules_Remove(
@@ -224,9 +472,25 @@ static HRESULT WINAPI netfw_rules_Item(
     INetFwRule **rule)
 {
     fw_rules *This = impl_from_INetFwRules( iface );
+    fw_rule *rule_internal;
+    rule_data data;
+    WCHAR buffer[1024];
+    INetFwRule *ret;
 
-    FIXME("%p, %s, %p\n", This, debugstr_w(name), rule);
-    return E_NOTIMPL;
+    TRACE("%p, %s, %p\n", This, debugstr_w(name), rule);
+
+    if (!read_rule_from_registry(&data, name, buffer, sizeof(buffer)))
+    {
+        TRACE("failed\n");
+        return HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND);
+    }
+    TRACE("success\n");
+    NetFwRule_create(NULL, (void**)&ret);
+    rule_internal = impl_from_INetFwRule(ret);
+    rule_internal->data = data;
+    *rule = ret;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI netfw_rules_get__NewEnum(
@@ -551,8 +815,11 @@ static HRESULT WINAPI fwpolicy2_get_CurrentProfileTypes(INetFwPolicy2 *iface, LO
 {
     fw_policy2 *This = impl_from_INetFwPolicy2( iface );
 
-    FIXME("%p %p\n", This, profile);
-    return E_NOTIMPL;
+    FIXME("Semi stub: %p %p\n", This, profile);
+
+    *profile = NET_FW_PROFILE2_PRIVATE | NET_FW_PROFILE2_PUBLIC | NET_FW_PROFILE2_DOMAIN;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI fwpolicy2_get_FirewallEnabled(INetFwPolicy2 *iface, NET_FW_PROFILE_TYPE2 profileType, VARIANT_BOOL *enabled)
@@ -785,3 +1052,682 @@ HRESULT NetFwPolicy2_create( IUnknown *outer, void **obj )
     TRACE("returning iface %p\n", *obj);
     return S_OK;
 }
+
+
+
+
+
+
+
+
+
+
+
+static HRESULT WINAPI netfw_rule_QueryInterface(INetFwRule *iface, REFIID riid, void **object)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("%p %s %p\n", This, debugstr_guid(riid), object );
+
+    if (IsEqualGUID(riid, &IID_INetFwRule) ||
+        IsEqualGUID(riid, &IID_IDispatch) ||
+        IsEqualGUID(riid, &IID_IUnknown))
+    {
+        *object = iface;
+    }
+    else
+    {
+        FIXME("interface %s not implemented\n", debugstr_guid(riid));
+        return E_NOINTERFACE;
+    }
+    INetFwRule_AddRef(iface);
+    return S_OK;
+}
+
+static ULONG WINAPI netfw_rule_AddRef(INetFwRule *iface)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+    return InterlockedIncrement(&This->refs);
+}
+
+static ULONG WINAPI netfw_rule_Release(INetFwRule *iface)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+    LONG refs = InterlockedDecrement(&This->refs);
+    if (!refs)
+    {
+        TRACE("destroying %p\n", This);
+        SysFreeString(This->data.application_name);
+        SysFreeString(This->data.description);
+        SysFreeString(This->data.grouping);
+        SysFreeString(This->data.interface_types);
+        SysFreeString(This->data.local_addresses);
+        SysFreeString(This->data.local_ports);
+        SysFreeString(This->data.name);
+        SysFreeString(This->data.remote_addresses);
+        SysFreeString(This->data.remote_ports);
+        SysFreeString(This->data.service_name);
+        SysFreeString(This->data.interface_name);
+        HeapFree(GetProcessHeap(), 0, This);
+    }
+    return refs;
+}
+
+static HRESULT WINAPI netfw_rule_GetTypeInfoCount(INetFwRule *iface, UINT *pctinfo)
+{
+    fw_rule *This = impl_from_INetFwRule( iface );
+
+    TRACE("%p %p\n", This, pctinfo);
+    *pctinfo = 1;
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_GetTypeInfo(INetFwRule *iface, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("%p %u %u %p\n", This, iTInfo, lcid, ppTInfo);
+    return get_typeinfo(INetFwRule_tid, ppTInfo);
+}
+
+static HRESULT WINAPI netfw_rule_GetIDsOfNames(INetFwRule *iface, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+    ITypeInfo *typeinfo;
+    HRESULT hr;
+
+    TRACE("%p %s %p %u %u %p\n", This, debugstr_guid(riid), rgszNames, cNames, lcid, rgDispId);
+
+    hr = get_typeinfo(INetFwRule_tid, &typeinfo);
+    if (SUCCEEDED(hr))
+    {
+        hr = ITypeInfo_GetIDsOfNames(typeinfo, rgszNames, cNames, rgDispId);
+        ITypeInfo_Release(typeinfo);
+    }
+    return hr;
+}
+
+static HRESULT WINAPI netfw_rule_Invoke(INetFwRule *iface, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags,
+                                        DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+    ITypeInfo *typeinfo;
+    HRESULT hr;
+
+    TRACE("%p %d %s %d %d %p %p %p %p\n", This, dispIdMember, debugstr_guid(riid), lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
+
+    hr = get_typeinfo( INetFwRule_tid, &typeinfo );
+    if (SUCCEEDED(hr))
+    {
+        hr = ITypeInfo_Invoke(typeinfo, &This->INetFwRule_iface, dispIdMember, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
+        ITypeInfo_Release(typeinfo);
+    }
+    return hr;
+}
+
+static void rule_add_string(WCHAR *buffer, const WCHAR *name, const WCHAR *str)
+{
+    WCHAR temp[200];
+    if (str)
+    {
+        wsprintfW(temp, L"%ls=%ls|", name, str);
+        lstrcatW(buffer, temp);
+    }
+}
+
+static void rule_add_int(WCHAR *buffer, const WCHAR *name, int value)
+{
+    WCHAR temp[200];
+    wsprintfW(temp, L"%ls=%d|", name, value);
+    lstrcatW(buffer, temp);
+}
+
+static void rule_write_to_registry(fw_rule *rule)
+{
+    rule_data *data = &rule->data;
+    WCHAR buffer[1024] = {0};
+    HKEY key;
+    static const char *path = "SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\FirewallRules";
+    LSTATUS status;
+
+    if (!data->name)
+        return;
+
+    lstrcatW(buffer, L"1.0|");
+
+    rule_add_string(buffer, L"Name", data->name);
+    rule_add_string(buffer, L"App", data->application_name);
+    rule_add_string(buffer, L"EmbedCtxt", data->grouping);
+    rule_add_string(buffer, L"LA4", data->local_addresses);
+    rule_add_string(buffer, L"RA4", data->remote_addresses);
+
+    rule_add_string(buffer, L"LPort", data->local_ports);
+    rule_add_string(buffer, L"RPort", data->remote_ports);
+    rule_add_string(buffer, L"Desc", data->description);
+    rule_add_string(buffer, L"Svc", data->service_name);
+    rule_add_string(buffer, L"IFType", data->interface_types);
+
+    rule_add_string(buffer,L"Active", data->enabled == VARIANT_TRUE ? L"TRUE" : L"FALSE");
+    rule_add_string(buffer,L"Edge", data->edge_traversal == VARIANT_TRUE ? L"TRUE" : L"FALSE");
+    rule_add_string(buffer,L"Dir", data->direction == NET_FW_RULE_DIR_IN ? L"In" : L"Out");
+
+    rule_add_int(buffer, L"Protocol", data->protocol);
+
+    if (data->action == NET_FW_ACTION_ALLOW)
+    {
+        rule_add_string(buffer,L"Action", L"Allow");
+    }
+    else if (data->action == NET_FW_ACTION_BLOCK)
+    {
+        rule_add_string(buffer,L"Action", L"Block");
+    }
+    else
+    {
+        ERR("Unknown action %d\n", data->action);
+    }
+
+    status = RegCreateKeyExA(HKEY_LOCAL_MACHINE, path, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, NULL);
+    if (status != 0)
+    {
+        ERR("Failed to open key: %d\n", status);
+        return;
+    }
+
+    status = RegSetValueExW(key, data->name, 0, REG_SZ, (BYTE*)buffer, (lstrlenW(buffer) + 1) * sizeof(WCHAR));
+    if (status != 0)
+    {
+        ERR("Failed to write key: %d\n", status);
+        return;
+    }
+
+   RegCloseKey(key);
+   /* TODO Profile, IF */
+}
+
+/*
+ * TODO: Who frees string?
+ * TODO Don't crash on mallformed registry entry!
+ * TODO: How null strings are handled?
+ * TODO multiple rules with same name...
+ */
+
+static HRESULT WINAPI netfw_rule_get_Name(INetFwRule *iface, BSTR *name)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, name, wine_dbgstr_w(This->data.name));
+
+    *name = SysAllocString(This->data.name);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_Name(INetFwRule *iface, BSTR name)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(name));
+
+    This->data.name = SysAllocString(name);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_Description(INetFwRule *iface, BSTR *desc)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, desc, wine_dbgstr_w(This->data.application_name));
+
+    *desc = SysAllocString(This->data.description);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_Description(INetFwRule *iface, BSTR desc)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(desc));
+
+    This->data.description = SysAllocString(desc);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_ApplicationName(INetFwRule *iface, BSTR *imagename)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, imagename, wine_dbgstr_w(This->data.application_name));
+
+    *imagename = SysAllocString(This->data.application_name);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_ApplicationName(INetFwRule *iface, BSTR imagename)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(imagename));
+
+    This->data.application_name = SysAllocString(imagename);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_ServiceName(INetFwRule *iface, BSTR *service)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, service, wine_dbgstr_w(This->data.service_name));
+
+    *service = SysAllocString(This->data.service_name);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_ServiceName(INetFwRule *iface, BSTR service)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(service));
+
+    This->data.service_name = SysAllocString(service);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_Protocol(INetFwRule *iface, LONG *protocol)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %d\n", This, protocol, This->data.protocol);
+
+    *protocol = This->data.protocol;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_Protocol(INetFwRule *iface, LONG protocol)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %d)\n", This, protocol);
+
+    This->data.protocol = protocol;
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_LocalPorts(INetFwRule *iface, BSTR *ports)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, ports, wine_dbgstr_w(This->data.local_ports));
+
+    *ports = SysAllocString(This->data.local_ports);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_LocalPorts(INetFwRule *iface, BSTR ports)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(ports));
+
+    This->data.local_ports = SysAllocString(ports);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_RemotePorts(INetFwRule *iface, BSTR *ports)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, ports, wine_dbgstr_w(This->data.remote_ports));
+
+    *ports = SysAllocString(This->data.remote_ports);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_RemotePorts(INetFwRule *iface, BSTR ports)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(ports));
+
+    This->data.remote_ports = SysAllocString(ports);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_LocalAddresses(INetFwRule *iface, BSTR *address)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, address, wine_dbgstr_w(This->data.local_addresses));
+
+    *address = SysAllocString(This->data.local_addresses);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_LocalAddresses(INetFwRule *iface, BSTR address)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(address));
+
+    This->data.local_addresses = SysAllocString(address);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_RemoteAddresses(INetFwRule *iface, BSTR *address)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, address, wine_dbgstr_w(This->data.remote_addresses));
+
+    *address = SysAllocString(This->data.remote_addresses);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_RemoteAddresses(INetFwRule *iface, BSTR address)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(address));
+
+    This->data.remote_addresses = SysAllocString(address);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_IcmpTypesAndCodes(INetFwRule *iface, BSTR *codes)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    FIXME("(%p %p)\n", This, codes);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI netfw_rule_put_IcmpTypesAndCodes(INetFwRule *iface, BSTR codes)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    FIXME("(%p %s)\n", This, wine_dbgstr_w(codes));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI netfw_rule_get_Direction(INetFwRule *iface, NET_FW_RULE_DIRECTION *dir)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %d\n", This, dir, This->data.direction);
+
+    *dir = This->data.direction;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_Direction(INetFwRule *iface, NET_FW_RULE_DIRECTION dir)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %d)\n", This, dir);
+
+    This->data.direction = dir;
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_Interfaces(INetFwRule *iface, VARIANT *interfaces)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    FIXME("(%p %p)\n", This, interfaces);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI netfw_rule_put_Interfaces(INetFwRule *iface, VARIANT interfaces)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    FIXME("(%p)\n", This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_InterfaceTypes(INetFwRule *iface, BSTR *types)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %d\n", This, types, This->data.interface_types);
+
+    *types = SysAllocString(This->data.interface_types);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_InterfaceTypes(INetFwRule *iface, BSTR types)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(types));
+
+    This->data.interface_types = SysAllocString(types);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_Enabled(INetFwRule *iface, VARIANT_BOOL *enabled)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p)\n", This, enabled);
+
+    *enabled = This->data.enabled;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_Enabled(INetFwRule *iface, VARIANT_BOOL enabled)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %d)\n", This, enabled);
+
+    This->data.enabled = enabled;
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_Grouping(INetFwRule *iface, BSTR *context)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %s\n", This, context, wine_dbgstr_w(This->data.grouping));
+
+    *context = SysAllocString(This->data.grouping);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_Grouping(INetFwRule *iface, BSTR context)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %s)\n", This, wine_dbgstr_w(context));
+
+    This->data.grouping = SysAllocString(context);
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_Profiles(INetFwRule *iface, LONG *profiles)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %d\n", This, profiles, This->data.profiles);
+
+    *profiles = This->data.profiles | NET_FW_PROFILE2_PRIVATE | NET_FW_PROFILE2_PUBLIC | NET_FW_PROFILE2_DOMAIN; // TODO: implement properly. Also, multiple profiles are allowed!
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_Profiles(INetFwRule *iface, LONG profiles)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %d)\n", This, profiles);
+
+    This->data.profiles = profiles;
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_EdgeTraversal(INetFwRule *iface, VARIANT_BOOL *enabled)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p)\n", This, enabled);
+
+    *enabled = This->data.edge_traversal;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_EdgeTraversal(INetFwRule *iface, VARIANT_BOOL enabled)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %d)\n", This, enabled);
+
+    This->data.edge_traversal = enabled;
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_get_Action(INetFwRule *iface, NET_FW_ACTION *action)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %p) - ret: %d\n", This, action, This->data.action);
+
+    *action = This->data.action;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI netfw_rule_put_Action(INetFwRule *iface, NET_FW_ACTION action)
+{
+    fw_rule *This = impl_from_INetFwRule(iface);
+
+    TRACE("(%p %d)\n", This, action);
+
+    This->data.action = action;
+    rule_write_to_registry(This);
+
+    return S_OK;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+static const struct INetFwRuleVtbl fw_rule_vtbl =
+{
+    netfw_rule_QueryInterface,
+    netfw_rule_AddRef,
+    netfw_rule_Release,
+    netfw_rule_GetTypeInfoCount,
+    netfw_rule_GetTypeInfo,
+    netfw_rule_GetIDsOfNames,
+    netfw_rule_Invoke,
+    netfw_rule_get_Name,
+    netfw_rule_put_Name,
+    netfw_rule_get_Description,
+    netfw_rule_put_Description,
+    netfw_rule_get_ApplicationName,
+    netfw_rule_put_ApplicationName,
+    netfw_rule_get_ServiceName,
+    netfw_rule_put_ServiceName,
+    netfw_rule_get_Protocol,
+    netfw_rule_put_Protocol,
+    netfw_rule_get_LocalPorts,
+    netfw_rule_put_LocalPorts,
+    netfw_rule_get_RemotePorts,
+    netfw_rule_put_RemotePorts,
+    netfw_rule_get_LocalAddresses,
+    netfw_rule_put_LocalAddresses,
+    netfw_rule_get_RemoteAddresses,
+    netfw_rule_put_RemoteAddresses,
+    netfw_rule_get_IcmpTypesAndCodes,
+    netfw_rule_put_IcmpTypesAndCodes,
+    netfw_rule_get_Direction,
+    netfw_rule_put_Direction,
+    netfw_rule_get_Interfaces,
+    netfw_rule_put_Interfaces,
+    netfw_rule_get_InterfaceTypes,
+    netfw_rule_put_InterfaceTypes,
+    netfw_rule_get_Enabled,
+    netfw_rule_put_Enabled,
+    netfw_rule_get_Grouping,
+    netfw_rule_put_Grouping,
+    netfw_rule_get_Profiles,
+    netfw_rule_put_Profiles,
+    netfw_rule_get_EdgeTraversal,
+    netfw_rule_put_EdgeTraversal,
+    netfw_rule_get_Action,
+    netfw_rule_put_Action,
+};
+
+HRESULT NetFwRule_create(IUnknown *outer, void **obj)
+{
+    fw_rule *rule;
+
+    TRACE("(%p,%p)\n", outer, obj);
+
+    rule = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*rule));
+    if (!rule) return E_OUTOFMEMORY;
+
+    rule->INetFwRule_iface.lpVtbl = &fw_rule_vtbl;
+    rule->refs = 1;
+
+    *obj = &rule->INetFwRule_iface;
+
+    TRACE("returning iface %p\n", *obj);
+    return S_OK;
+}
