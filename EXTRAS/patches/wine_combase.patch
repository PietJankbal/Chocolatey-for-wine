diff --git a/dlls/combase/combase.c b/dlls/combase/combase.c
index e072c169953..4ad2f0087f7 100644
--- a/dlls/combase/combase.c
+++ b/dlls/combase/combase.c
@@ -1029,7 +1029,7 @@ HRESULT WINAPI CoQueryProxyBlanket(IUnknown *proxy, DWORD *authn_service,
         IClientSecurity_Release(client_security);
     }
 
-    if (FAILED(hr)) ERR("-- failed with %#lx.\n", hr);
+    if (FAILED(hr)) {ERR("-- failed with %#lx. HACK: Faking succes!!!!\n", hr); hr = 0;}
     return hr;
 }
 
diff --git a/dlls/combase/marshal.c b/dlls/combase/marshal.c
index f638604f5a3..f49325297f0 100644
--- a/dlls/combase/marshal.c
+++ b/dlls/combase/marshal.c
@@ -1388,7 +1388,7 @@ static HRESULT WINAPI ProxyCliSec_QueryBlanket(IClientSecurity *iface,
     if (pCapabilities)
         *pCapabilities = EOAC_NONE;
 
-    return E_NOTIMPL;
+    return S_OK;
 }
 
 static HRESULT WINAPI ProxyCliSec_SetBlanket(IClientSecurity *iface,
@@ -1402,7 +1402,7 @@ static HRESULT WINAPI ProxyCliSec_SetBlanket(IClientSecurity *iface,
     FIXME("%p, %ld, %ld, %s, %ld, %ld, %p, %#lx: stub\n", pProxy, AuthnSvc, AuthzSvc,
           pServerPrincName == COLE_DEFAULT_PRINCIPAL ? "<default principal>" : debugstr_w(pServerPrincName),
           AuthnLevel, ImpLevel, pAuthInfo, Capabilities);
-    return E_NOTIMPL;
+    return S_OK;
 }
 
 static HRESULT WINAPI ProxyCliSec_CopyProxy(IClientSecurity *iface,
diff --git a/dlls/combase/roapi.c b/dlls/combase/roapi.c
index 02d9e0b536e..4446b777abf 100644
--- a/dlls/combase/roapi.c
+++ b/dlls/combase/roapi.c
@@ -162,8 +162,51 @@ HRESULT WINAPI DECLSPEC_HOTPATCH RoGetActivationFactory(HSTRING classid, REFIID
     hr = get_library_for_classid(WindowsGetStringRawBuffer(classid, NULL), &library);
     if (FAILED(hr))
     {
-        ERR("Failed to find library for %s\n", debugstr_hstring(classid));
-        return hr;
+        ERR("Failed to find library for %s,trying again with some dummy dll;\n", debugstr_hstring(classid));
+        
+        static const struct
+        {
+            const WCHAR *reg_entry;
+            const WCHAR *dll;
+        }
+        a[] =
+        {
+            {L"Windows.Foundation.Diagnostics.AsyncCausalityTracer", L"c:\\windows\\system32\\combase.dll"},
+            {L"Windows.UI.Xaml.Application", L"c:\\windows\\system32\\Windows.UI.Xaml.dll"},
+            {L"Windows.UI.Xaml.Hosting.WindowsXamlManager", L"c:\\windows\\system32\\Windows.UI.Xaml.dll"}, 
+        };
+        
+        int i;
+        HKEY hkey_main=0;
+        WCHAR buf[MAX_PATH] = L"";
+        BOOL found = FALSE;
+        
+       for(i=0; i<ARRAY_SIZE(a);i++) {
+           if(!wcsicmp(a[i].reg_entry, WindowsGetStringRawBuffer(classid, NULL)) ) {
+			   
+			   found = TRUE;
+			   FIXME("Trying to load a dummy dll for %ls, expect problems; Consider copying a native %ls to sysdirs, maybe you're lucky...\n", a[i].dll, a[i].dll);
+			   
+               buf[0] = 0;
+               RegCreateKeyExW( HKEY_LOCAL_MACHINE, wcscat(wcscat(buf, L"Software\\Microsoft\\WindowsRuntime\\ActivatableClassId\\"), WindowsGetStringRawBuffer(classid, NULL) ), 0, 0, 0, KEY_READ|KEY_WRITE|KEY_WOW64_64KEY, 0, &hkey_main,0 );
+               RegSetValueExW(hkey_main, L"DllPath", 0, REG_SZ, (BYTE *)a[i].dll, (lstrlenW(a[i].dll) + 1) * sizeof(WCHAR));
+               RegCloseKey(hkey_main);
+               
+               buf[0] = 0; hkey_main=0;
+               RegCreateKeyExW( HKEY_LOCAL_MACHINE, wcscat(wcscat(buf, L"Software\\Microsoft\\WindowsRuntime\\ActivatableClassId\\"), WindowsGetStringRawBuffer(classid, NULL) ), 0, 0, 0, KEY_READ|KEY_WRITE|KEY_WOW64_32KEY, 0, &hkey_main,0 );
+               RegSetValueExW(hkey_main, L"DllPath", 0, REG_SZ, (BYTE *)a[i].dll, (lstrlenW(a[i].dll) + 1) * sizeof(WCHAR));
+               RegCloseKey(hkey_main);    
+               
+               buf[0] = 0;
+               CopyFileW(L"c:\\windows\\system32\\windows.ui.dll", a[i].dll, TRUE);
+               CopyFileW(L"c:\\windows\\syswow64\\windows.ui.dll",wcscat( wcscat(buf, L"c:\\windows\\syswow64"), wcsrchr(a[i].dll,L'\\') ), TRUE);
+
+               // try again
+               hr = get_library_for_classid(WindowsGetStringRawBuffer(classid, NULL), &library);
+           }
+        }
+    if(!found) ERR("No idea what dll to load for classid %ls; patch me with correct entries  \n", WindowsGetStringRawBuffer(classid, NULL));
+    if (FAILED(hr)) {ERR("Failed to find library for %ls\n", WindowsGetStringRawBuffer(classid, NULL)); return hr;}
     }
 
     if (!(module = LoadLibraryW(library)))
@@ -207,10 +250,15 @@ HRESULT WINAPI RoGetParameterizedTypeInstanceIID(UINT32 name_element_count, cons
                                                  const IRoMetaDataLocator *meta_data_locator, GUID *iid,
                                                  ROPARAMIIDHANDLE *hiid)
 {
-    FIXME("stub: %d %p %p %p %p\n", name_element_count, name_elements, meta_data_locator, iid, hiid);
-    if (iid) *iid = GUID_NULL;
-    if (hiid) *hiid = INVALID_HANDLE_VALUE;
-    return E_NOTIMPL;
+	int i;
+	ROPARAMIIDHANDLE h;
+	
+	for (i=0;i<name_element_count;i++) {    TRACE("stub: %d %s %p %p %p\n", name_element_count, debugstr_w(name_elements[i]), meta_data_locator, iid, hiid);}
+
+     GUID testGuid = {0xFFFFFFFF, 0xFFFF, 0xFFFF, {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}};
+    if (iid) *iid = testGuid; //GUID_NULL;
+    if (hiid) hiid = &h; //INVALID_HANDLE_VALUE;
+    return S_OK;//E_NOTIMPL;
 }
 
 /***********************************************************************
